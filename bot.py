import os
import time
import json
import requests
import threading
import traceback
from flask import Flask, request

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
def MainProtokol(s, ts='–ó–∞–ø–∏—Å—å'):
    dt = time.strftime('%d.%m.%Y %H:%M:') + '00'
    try:
        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(f"{dt};{ts};{s}\n")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", e)

# ====== –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ======
def cool_error_handler(exc, context=""):
    exc_type = type(exc).__name__
    tb_str = ''.join(traceback.format_exception(type(exc), exc, exc.__traceback__))
    msg = (
        f"\n{'='*40}\n"
        f"[CRITICAL ERROR]: {exc_type}\n"
        f"Context: {context}\n"
        f"Time: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"Traceback:\n{tb_str}\n"
        f"{'='*40}\n"
    )
    # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª
    try:
        with open('critical_errors.log', 'a', encoding='utf-8') as f:
            f.write(msg)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:", e)
    # –¢–∞–∫–∂–µ –ø–∏—à–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
    MainProtokol(msg, ts='CRITICAL ERROR')
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(msg)
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω—É
    admin_id = int(os.getenv("ADMIN_ID", "0"))
    token = os.getenv("API_TOKEN")
    if admin_id and token:
        try:
            requests.post(
                f"https://api.telegram.org/bot{token}/sendMessage",
                data={
                    "chat_id": admin_id,
                    "text": f"‚ö†Ô∏è Critically Error!\n–¢–∏–ø: {exc_type}\nContext: {context}\n\n{str(exc)}",
                    "disable_web_page_preview": True
                },
                timeout=5
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É:", e)

# ====== –û—Ç–ª–∞–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç) ======
def time_debugger():
    while True:
        print("[DEBUG]", time.strftime('%Y-%m-%d %H:%M:%S'))
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (reply-–∫–Ω–æ–ø–∫–∏) ======
MAIN_MENU = [
    "üì¢ –ü—Ä–æ –Ω–∞—Å",
    "üï∞Ô∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏",
    "üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É"
]

def get_reply_buttons():
    return {
        "keyboard": [
            [{"text": "üì¢ –ü—Ä–æ –Ω–∞—Å"}],
            [{"text": "üï∞Ô∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏"}],
            [{"text": "üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ======
waiting_for_admin_message = set()

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
WEBHOOK_URL = f"https://telegram-bot-1-g3bw.onrender.com/webhook/{TOKEN}"

# ====== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ======
def set_webhook():
    try:
        r = requests.get(
            f"https://api.telegram.org/bot{TOKEN}/setWebhook",
            params={"url": WEBHOOK_URL}
        )
        if r.ok:
            print("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", r.text)
    except Exception as e:
        cool_error_handler(e, context="set_webhook")

set_webhook()

# ====== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ======
def send_message(chat_id, text, reply_markup=None):
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': text
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    try:
        resp = requests.post(url, data=payload)
        if not resp.ok:
            MainProtokol(resp.text, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
        return resp
    except Exception as e:
        cool_error_handler(e, context="send_message")
        MainProtokol(str(e), '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏')

def _get_reply_markup_for_admin(user_id: int):
    return {
        "inline_keyboard": [
            [{"text": "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", "callback_data": f"reply_{user_id}"}]
        ]
    }

def forward_user_message_to_admin(message: dict):
    try:
        if not ADMIN_ID or ADMIN_ID == 0:
            send_message(message['chat']['id'], "‚ö†Ô∏è –ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        user_chat_id = message['chat']['id']
        user_first = message['from'].get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        msg_id = message.get('message_id')
        text = message.get('text') or message.get('caption') or ''
        admin_info = f"üì© –û—Ç {user_first}\nID: {user_chat_id}"
        if text:
            admin_info += f"\n\n{text}"

        reply_markup = _get_reply_markup_for_admin(user_chat_id)

        try:
            fwd_url = f'https://api.telegram.org/bot{TOKEN}/forwardMessage'
            fwd_payload = {'chat_id': ADMIN_ID, 'from_chat_id': user_chat_id, 'message_id': msg_id}
            fwd_resp = requests.post(fwd_url, data=fwd_payload)
            if fwd_resp.ok:
                send_message(ADMIN_ID, admin_info, reply_markup=reply_markup)
                send_message(user_chat_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É!")
                return
            else:
                MainProtokol(f"forwardMessage failed: {fwd_resp.text}", "ForwardFail")
        except Exception as e:
            cool_error_handler(e, context="forward_user_message_to_admin: forwardMessage")
            MainProtokol(str(e), "ForwardException")

        media_sent = False
        try:
            media_types = [
                ('photo', 'sendPhoto', 'photo'),
                ('video', 'sendVideo', 'video'),
                ('document', 'sendDocument', 'document'),
                ('audio', 'sendAudio', 'audio'),
                ('voice', 'sendVoice', 'voice'),
                ('animation', 'sendAnimation', 'animation')
            ]
            for key, endpoint, payload_key in media_types:
                if key in message:
                    file_id = message[key][-1]['file_id'] if key == 'photo' else message[key]['file_id']
                    url = f'https://api.telegram.org/bot{TOKEN}/{endpoint}'
                    payload = {
                        'chat_id': ADMIN_ID,
                        payload_key: file_id,
                        'caption': admin_info,
                        'reply_markup': json.dumps(reply_markup)
                    }
                    resp = requests.post(url, data=payload)
                    media_sent = resp.ok
                    if not media_sent:
                        MainProtokol(f'{endpoint} failed: {resp.text}', "MediaSendFail")
                    break
            else:
                send_message(ADMIN_ID, admin_info, reply_markup=reply_markup)
                send_message(user_chat_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É!")
                return
        except Exception as e:
            cool_error_handler(e, context="forward_user_message_to_admin: sendMedia")
            MainProtokol(str(e), "SendMediaException")

        if media_sent:
            send_message(user_chat_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É!")
        else:
            send_message(ADMIN_ID, admin_info, reply_markup=reply_markup)
            send_message(user_chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –º–µ–¥—ñ–∞. –ê–¥–º—ñ–Ω—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    except Exception as e:
        cool_error_handler(e, context="forward_user_message_to_admin: unhandled")
        MainProtokol(str(e), "ForwardUnhandledException")
        try:
            send_message(message['chat']['id'], "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except Exception as err:
            cool_error_handler(err, context="forward_user_message_to_admin: notify user")

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ ======
waiting_for_admin = {}

# ====== Flask ======
app = Flask(__name__)

@app.errorhandler(Exception)
def flask_global_error_handler(e):
    cool_error_handler(e, context="Flask global error handler")
    return "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", 500

@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    try:
        data_raw = request.get_data(as_text=True)
        update = json.loads(data_raw)

        if 'callback_query' in update:
            call = update['callback_query']
            chat_id = call['from']['id']
            data = call['data']

            if data.startswith("reply_") and chat_id == ADMIN_ID:
                try:
                    user_id = int(data.split("_")[1])
                    waiting_for_admin[ADMIN_ID] = user_id
                    send_message(
                        ADMIN_ID,
                        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:"
                    )
                except Exception as e:
                    cool_error_handler(e, context="webhook: callback_query reply_")
                    MainProtokol(str(e), '–û—à–∏–±–∫–∞ callback reply')
            elif data == "about":
                send_message(
                    chat_id,
                    "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ–≤. "
                    "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: "
                    "https://www.instagram.com/p/DOEpwuEiLuC/"
                )
            elif data == "schedule":
                send_message(
                    chat_id,
                    "–ù–∞—à –±–æ—Ç –ø—Ä–∏–π–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 25/8! "
                    "–ê–¥–º—ñ–Ω –º–æ–∂–µ —Å–ø–∞—Ç–∏, –∞–ª–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å üòâ"
                )
            elif data == "write_admin":
                waiting_for_admin_message.add(chat_id)
                send_message(
                    chat_id,
                    "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç):"
                )
            return "ok", 200

        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            from_id = message['from']['id']
            text = message.get('text', '')
            first_name = message['from'].get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')

            # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if from_id == ADMIN_ID and ADMIN_ID in waiting_for_admin:
                user_id = waiting_for_admin.pop(ADMIN_ID)
                send_message(user_id, f"üí¨ –ê–¥–º–∏–Ω:\n{text}")
                send_message(ADMIN_ID, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return "ok", 200

            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ Reply-–∫–Ω–æ–ø–∫–∏
            if text == '/start':
                send_message(
                    chat_id,
                    "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é üëá",
                    reply_markup=get_reply_buttons()
                )
            elif text in MAIN_MENU:
                if text == "üì¢ –ü—Ä–æ –Ω–∞—Å":
                    send_message(
                        chat_id,
                        "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ–≤. "
                        "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: "
                        "https://www.instagram.com/p/DOEpwuEiLuC/"
                    )
                elif text == "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏":
                    send_message(
                        chat_id,
                        "–ù–∞—à –±–æ—Ç –ø—Ä–∏–π–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 25/8! "
                        "–ê–¥–º—ñ–Ω –º–æ–∂–µ —Å–ø–∞—Ç–∏, –∞–ª–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å üòâ"
                    )
                elif text == "üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É":
                    waiting_for_admin_message.add(chat_id)
                    send_message(
                        chat_id,
                        "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç):"
                    )
            else:
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞
                if chat_id in waiting_for_admin_message:
                    forward_user_message_to_admin(message)
                    waiting_for_admin_message.remove(chat_id)
                else:
                    send_message(
                        chat_id,
                        "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É 'üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É' —É –º–µ–Ω—é."
                    )

        return "ok", 200

    except Exception as e:
        cool_error_handler(e, context="webhook - outer")
        MainProtokol(str(e), '–û—à–∏–±–∫–∞ webhook')
        return "ok", 200

@app.route('/', methods=['GET'])
def index():
    try:
        MainProtokol('–ö—Ç–æ-—Ç–æ –∑–∞—à–µ–ª –Ω–∞ —Å–∞–π—Ç')
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200
    except Exception as e:
        cool_error_handler(e, context="index route")
        return "Error", 500

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥—á–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    try:
        threading.Thread(target=time_debugger, daemon=True).start()
    except Exception as e:
        cool_error_handler(e, context="main: start time_debugger")
    port = int(os.getenv("PORT", 5000))
    try:
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        cool_error_handler(e, context="main: app.run")
