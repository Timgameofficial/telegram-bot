import time
import json
import requests
import os
import requests

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
def MainProtokol(s, ts='–ó–∞–ø–∏—Å—å'):
    dt = time.strftime('%d.%m.%Y %H:%M:') + '00'
    with open('log.txt', 'a') as f:
        f.write(f"{dt};{ts};{s}\n")

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
TOKEN = os.getenv("API_TOKEN")  # Telegram —Ç–æ–∫–µ–Ω
ADMIN_ID = os.getenv("ADMIN_ID")  # ID –∞–¥–º–∏–Ω–∞
WEBHOOK_URL = f"https://telegram-bot-1-g3bw.onrender.com/webhook/7589889850:AAGp_If3FCVgZCQDrwM2KaCx6bH9ZpGOPGY"

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ —É Telegram
try:
    r = requests.get(f"https://api.telegram.org/bot7589889850:AAGp_If3FCVgZCQDrwM2KaCx6bH9ZpGOPGY/setWebhook?url=https://telegram-bot-1-g3bw.onrender.com/webhook/7589889850:AAGp_If3FCVgZCQDrwM2KaCx6bH9ZpGOPGY
")
    if r.ok:
        print("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", r.text)
except Exception as e:
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook:", e)

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======
MAIN_MENU = ["üì¢ –ü—Ä–æ –Ω–∞—Å", "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏", "üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É"]

# ====== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ======
def send_message(chat_id, text):
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {'chat_id': chat_id, 'text': text}
    resp = requests.post(url, data=payload)
    if not resp.ok:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {resp.text}")
    return resp

# ====== –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook ======
def application(env, start_response):
    try:
        content = ''
        path = env.get('PATH_INFO', '')
        if path.lower() == '/tg_bot':
            wsgi_input = env['wsgi.input'].read()
            data_raw = wsgi_input.decode('utf-8').replace('\n', ' ')
            
            try:
                update = json.loads(data_raw)
            except Exception:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")

            # ====== –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
            message = update.get('message')
            if not message:
                raise ValueError("–ù–µ—Ç –ø–æ–ª—è 'message' –≤ JSON")

            chat_id = message['chat']['id']
            text = message.get('text', '')
            first_name = message['from'].get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')

            # ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ======
            if text == '/start':
                msg = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –≤ –º–µ–Ω—é üëá\n" + "\n".join(MAIN_MENU)
                send_message(chat_id, msg)
            elif text == "üì¢ –ü—Ä–æ –Ω–∞—Å":
                send_message(chat_id, "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ–≤. –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://www.instagram.com/p/DOEpwuEiLuC/?igsh=MTdjY3l4Mmt1d2VoeQ==")
            elif text == "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏":
                send_message(chat_id, "–ù–∞—à –±–æ—Ç –ø—Ä–∏–π–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 25/8! –ê–¥–º—ñ–Ω –º–æ–∂–µ —Å–ø–∞—Ç–∏, –∞–ª–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å üòâ")
            elif text == "üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É":
                send_message(chat_id, "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç):")
            else:
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                admin_msg = f"üì© –î–æ–ø–∏—Å –≤—ñ–¥ {first_name}\nID: {chat_id}\n–¢–µ–∫—Å—Ç: {text}"
                send_message(ADMIN_ID, admin_msg)
                send_message(chat_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É!")

        elif path == '/':
            MainProtokol('–∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—à–µ–ª –Ω–∞ —Å–∞–π—Ç')
        else:
            raise ValueError(f"–í—ã–∑–æ–≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ URL :: {path}")

        start_response('200 OK', [('Content-Type', 'text/html')])
        return [content.encode('utf-8')]

    except Exception as e:
        MainProtokol(str(e), '–û—à–∏–±–∫–∞')
        start_response('200 OK', [('Content-Type', 'text/html')])
        return [str(e).encode('utf-8')]


from flask import Flask

app = Flask(__name__)
